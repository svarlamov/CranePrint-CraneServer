package org.craneprint.craneserver.ui;

import java.util.ArrayList;

import org.craneprint.craneserver.gcode.GCodeFile;
import org.craneprint.craneserver.gcode.GCodeUploadedEvent;
import org.craneprint.craneserver.gcode.GCodeUploadedListener;
import org.craneprint.craneserver.help.HelpTab;
import org.craneprint.craneserver.printers.PrintersManager;
import org.craneprint.craneserver.slicing.SlicingTab;
import org.craneprint.craneserver.user_composites.MyPrintsTab;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.server.Page;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Accordion;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalSplitPanel;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Panel;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.Upload;
import com.vaadin.ui.VerticalLayout;

public class PrintComposite extends CustomComponent{

	/*- VaadinEditorProperties={"grid":"RegularGrid,5","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":5} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private HorizontalSplitPanel printingHorizSplitPanel;
	@AutoGenerated
	private TabSheet detailsTabSheet;
	@AutoGenerated
	private VerticalLayout leftVertical;
	@AutoGenerated
	private Accordion fileAccordion;
	@AutoGenerated
	private Upload uploadComponent;
	@AutoGenerated
	private Accordion printerAccordion;
	@AutoGenerated
	private Panel filePanel;
	private Panel printerPanel;
	private SlicingTab slicingTab;
	private HelpTab helpTab;
	private MyPrintsTab myPrintsTab;
	
	Craneprint_craneserverUI ui = null;
	
	private GCodeUploader gcodeUploader = new GCodeUploader();
	private ArrayList<GCodeFile> fileArray = new ArrayList<GCodeFile>();
	private PrintersManager printersManager;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public PrintComposite(Craneprint_craneserverUI u) {
		ui = u;
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		printersManager = ui.getPrintersManager();
		for(int i = 0; i < printersManager.getSize(); i++){
			printerAccordion.addTab(new PrinterTabComposite(), printersManager.getPrinter(i).getName());
		}
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// horizontalSplitPanel_1
		printingHorizSplitPanel = buildHorizontalSplitPanel_1();
		mainLayout
				.addComponent(printingHorizSplitPanel, "top:7.0px;left:7.0px;");
		printingHorizSplitPanel.setSplitPosition(333, Unit.PIXELS);
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalSplitPanel buildHorizontalSplitPanel_1() {
		// common part: create layout
		printingHorizSplitPanel = new HorizontalSplitPanel();
		printingHorizSplitPanel.setImmediate(false);
		printingHorizSplitPanel.setWidth("100%");
		printingHorizSplitPanel.setHeight("100%");
		printingHorizSplitPanel.setLocked(true);
		
		// verticalLayout_1
		leftVertical = buildVerticalLayout_1();
		printingHorizSplitPanel.addComponent(leftVertical);
		
		// tabSheet_1
		detailsTabSheet = new TabSheet();
		detailsTabSheet.setImmediate(false);
		detailsTabSheet.setWidth("100.0%");
		detailsTabSheet.setHeight("100.0%");
		printingHorizSplitPanel.addComponent(detailsTabSheet);
		
		slicingTab = new SlicingTab();
		helpTab = new HelpTab();
		myPrintsTab = new MyPrintsTab();
		detailsTabSheet.addTab(slicingTab, "Slicing");
		detailsTabSheet.addTab(myPrintsTab, "My Prints");
		detailsTabSheet.addTab(helpTab, "Help");
		
		return printingHorizSplitPanel;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_1() {
		// common part: create layout
		leftVertical = new VerticalLayout();
		leftVertical.setImmediate(false);
		leftVertical.setWidth("98.0%");
		leftVertical.setHeight("-1px");
		leftVertical.setMargin(false);
		
		// accordion_3
		printerAccordion = new Accordion();
		printerAccordion.setImmediate(true);
		printerAccordion.setWidth("100.0%");
		printerAccordion.setHeight("-1px");
		
		// printerPanel
		printerPanel = new Panel("Available Printers");
		printerPanel.setWidth("100%");
		printerPanel.setHeight("-1px");
		printerPanel.setContent(printerAccordion);
		leftVertical.addComponent(printerPanel);
		
		// upload_1
		uploadComponent = new Upload();
		uploadComponent.setReceiver(gcodeUploader);
		uploadComponent.addFailedListener(gcodeUploader);
		uploadComponent.addSucceededListener(gcodeUploader);
		gcodeUploader.addEventListener(new GCodeUploadedListener() {
			public void handleGCodeUploadedEvent(GCodeUploadedEvent e) {
		        addFileTab(e.getGCode());
		    }
		});
		uploadComponent.setImmediate(false);
		uploadComponent.setWidth("100%");
		uploadComponent.setHeight("-1px");
		leftVertical.addComponent(uploadComponent);
		
		// accordion_4
		fileAccordion = new Accordion();
		fileAccordion.setImmediate(false);
		fileAccordion.setWidth("100%");
		fileAccordion.setHeight("-1px");
		
		// filePanel
		filePanel = new Panel("GCode Files");
		filePanel.setWidth("100%");
		filePanel.setHeight("-1px");
		filePanel.setContent(fileAccordion);
		leftVertical.addComponent(filePanel);
		
		return leftVertical;
	}
	
	public void addFileTab(GCodeFile g){
		//TODO: Add a file tab to the accordion, perhaps also store a GCodeFile
		fileArray.add(g);
		fileAccordion.addTab(new FileTabComposite(), g.getName());
    }
	
	public HandShake doHandShake(){
		return printersManager.doHandShake(printerAccordion.getTabIndex());
	}
	
	public void deleteFile(){
		// Called by the FileTabComposite in order to delete the GCodeFile
		if(fileArray.get(fileAccordion.getTabIndex()).deleteFile()){
			fileArray.remove(fileAccordion.getTabIndex());
			fileAccordion.removeComponent(fileAccordion.getSelectedTab());
		}
		else {
			new Notification("Could Not Delete File",
                    "There was an error deleting the selected file",
                    Notification.Type.ERROR_MESSAGE).show(Page.getCurrent());
		}
	}
	
	public void printFile(int copies, String notes) {
		// TODO: Print the file. Send it to the correct class with the right parameters
		GCodeFile toPrint = fileArray.get(fileAccordion.getTabIndex());
		toPrint.setNotes(notes);
		for(int i = 0; i < copies; i++)
			printersManager.addFile(printerAccordion.getTabIndex(), toPrint);
		new Notification("Success", copies +" Copies of Your File Were Added to the Print Queue", Notification.Type.ASSISTIVE_NOTIFICATION).show(Page.getCurrent());
	}
}
