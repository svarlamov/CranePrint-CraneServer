package org.craneprint.craneserver.ui;

import java.util.ArrayList;

import org.craneprint.craneserver.db.DBManager;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.Accordion;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Notification;
import com.vaadin.ui.VerticalLayout;

public class PrinterSettingsTab extends CustomComponent {

	@AutoGenerated
	private VerticalLayout mainLayout;
	
	private Craneprint_craneserverUI ui;
	private int printerId;
	private VerticalLayout generalLayout;
	private Accordion extruderAccordion;
	private Accordion shapeAccordion;
	private Accordion webcamAccordion;
	private Accordion gcodeAccordion;
	private Accordion mainAccordion;
	private ArrayList<PrinterSettingComposite> settingComposites = new ArrayList<PrinterSettingComposite>();
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public PrinterSettingsTab(int pid, Craneprint_craneserverUI u) {
		ui = u;
		printerId = pid;
		ui.getDBManager().setPrinterProperty(printerId, "port", 6880);
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
	}

	@AutoGenerated
	private void buildMainLayout() {
		// the main layout and components will be created here
		mainLayout = new VerticalLayout();
		mainLayout.setSizeFull();
		
		mainAccordion = new Accordion();
		mainAccordion.setImmediate(false);
		mainAccordion.setWidth("100%");
		mainAccordion.setHeight("-1px");
		mainLayout.addComponent(mainAccordion);
		
		generalLayout = makeGeneralSettingsView();
		mainAccordion.addTab(generalLayout, "General Settings");
	}
	
	private VerticalLayout makeGeneralSettingsView() {
		DBManager db = ui.getDBManager();
		VerticalLayout vl = new VerticalLayout();
		
		settingComposites.add(new PrinterSettingField("Printer Name: ", "name", (String)db.getPrinterProperty(printerId, "name")));
		settingComposites.add(new PrinterSettingField("Agent IP: ", "ip", (String)db.getPrinterProperty(printerId, "ip")));
		settingComposites.add(new PrinterSettingField("Agent Port: ", "port", (Integer)db.getPrinterProperty(printerId, "port")));
		for(PrinterSettingComposite psc : settingComposites){
			vl.addComponent((Component)psc);
		}
		
		return vl;
	}
	
	protected void saveConfig(){
		DBManager db = ui.getDBManager();
		for(PrinterSettingComposite psc : settingComposites){
			if(psc.isNull()){
				new Notification("One or More Field is Null", "Please Fill in all of the Fields", Notification.Type.ERROR_MESSAGE);
				return;
			}
		}
		for(PrinterSettingComposite psc : settingComposites){
			if(psc.isInt())
				db.setPrinterProperty(printerId, psc.getKey(), psc.getIntValue());
			else
				db.setPrinterProperty(printerId, psc.getKey(), psc.getValue());
		}
	}

}
